steps:
  - task: NodeTool@0
    displayName: 'Use Node 12.x'
    inputs:
      versionSpec: 12.x
    
  - task: Cache@2
    displayName: 'Cache npm'
    inputs:
      key: 'npm | "$(Agent.OS)" | package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
        npm
      path: $(npm_config_cache)

  - script: |
      npm ci
    displayName: 'Install project dependencies'

  - script: |
      node script/generate-config.js
    displayName: 'Generate the Cypress config'
    env:
      PASSWORD: $(password)
      BROWSER: ${{ parameters.browserType }}

  - bash: |
      # Check if verbose mode needs to be turned on
      if [ ! -z "$verbose" ]
      then
        DEBUG=cypress:*
      fi

      # Check if Cypress record information is provided
      if [ ! -z "$CYPRESS_RECORD_KEY" ]
      then
        # Record key was set
        ./node_modules/.bin/cypress run --browser ${{ parameters.browserType }} --record --parallel --group "azure" --ci-build-id $BUILD_BUILDNUMBER
      else
        # Record key wasn't set
        ./node_modules/.bin/cypress run --browser ${{ parameters.browserType }}
      fi
    displayName: 'Run the cypress tests'
  
  - task: PublishTestResults@2
    displayName: 'Publish the test reports'
    inputs:
      testResultsFiles: '**/reports/junit.*.xml'
    condition: succeededOrFailed()
    continueOnError: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish screenshots when there were issues'
    inputs:
      pathtoPublish: 'cypress/screenshots'
      artifactName: screenshots-${{ parameters.browserType }}
    condition: failed()
    continueOnError: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish videos'
    inputs:
      pathtoPublish: 'cypress/videos'
      artifactName: videos-${{ parameters.browserType }}
    condition: succeededOrFailed()
    continueOnError: true